function Passed() {
    data.map((student) => 
    {
      let finalGrade = (0.6*(student.examGrade) + 0.4*(student.ratingGrade)).toFixed(2);
      if(finalGrade>4) {
        status = "Passed";
      } else {
        status = "Failed";
      }
      if(status==="Passed") {
        tdata = (
          <tr key={student.id}>
          <td>{student.id}</td>
          <td>{student.name}</td>
          <td>{student.ticketNo}</td>
          <td>{student.ratingGrade}</td>
          <td>{student.examGrade}</td>
          <td>{finalGrade}</td>
          <td>{status}</td>
          <td>{student.details}</td>
        </tr>)
      }
      return tdata;
    })
  }

// Row style -----1
const [rowIndex, setRowIndex] = useState(null);
const handleRow=(event, i)=>{
  setRowIndex(i)
}  
<tr key={student.id} 
        style={rowIndex === i ? {background:'green'} : {background: ''}} 
        className='tdRow' 
        onClick={(e)=>handleRow(e, i)}>

// Row Style -----2
const [selectedRow, setSelectedRow] = useState(null);
  
  let addStyle = {
    backgroundColor: 'green',
  }
  let removeStyle = {
    backgroundColor: '',
  }

  const handleRow=(event, i)=>{
    if(i===selectedRow) {
      setSelectedRow(null)
    }
    else {
      setSelectedRow(i)
    }
  }
  const callStyle = (i) => {
    //when i will be equal to rowIdex, 
    //the color of that row will be changed whose index becomes equal to selectedRow
    if(i === selectedRow) {
      return addStyle
    } else {
      return removeStyle;
    }
  }

<tr key={student.id} 
        style={callStyle(i)} 
        className='tdRow' 
        onClick={(e)=>handleRow(e, i)}>



// let sdata = statisticsData.map((ele) => {
    //     return(
    //         <tr>
    //             <td>{Object.keys(ele)}</td>
    //             <td>{ele[Object.keys(ele)]}</td>
    //         </tr>
    //     )
    // })